/* easing*/
jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend( jQuery.easing,
{
	def: 'easeOutQuad',
	swing: function (x, t, b, c, d) {
		//alert(jQuery.easing.default);
		return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
	},
	easeInQuad: function (x, t, b, c, d) {
		return c*(t/=d)*t + b;
	},
	easeOutQuad: function (x, t, b, c, d) {
		return -c *(t/=d)*(t-2) + b;
	},
	easeInOutQuad: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t + b;
		return -c/2 * ((--t)*(t-2) - 1) + b;
	},
	easeInCubic: function (x, t, b, c, d) {
		return c*(t/=d)*t*t + b;
	},
	easeOutCubic: function (x, t, b, c, d) {
		return c*((t=t/d-1)*t*t + 1) + b;
	},
	easeInOutCubic: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t + b;
		return c/2*((t-=2)*t*t + 2) + b;
	},
	easeInQuart: function (x, t, b, c, d) {
		return c*(t/=d)*t*t*t + b;
	},
	easeOutQuart: function (x, t, b, c, d) {
		return -c * ((t=t/d-1)*t*t*t - 1) + b;
	},
	easeInOutQuart: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
		return -c/2 * ((t-=2)*t*t*t - 2) + b;
	},
	easeInQuint: function (x, t, b, c, d) {
		return c*(t/=d)*t*t*t*t + b;
	},
	easeOutQuint: function (x, t, b, c, d) {
		return c*((t=t/d-1)*t*t*t*t + 1) + b;
	},
	easeInOutQuint: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
		return c/2*((t-=2)*t*t*t*t + 2) + b;
	},
	easeInSine: function (x, t, b, c, d) {
		return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
	},
	easeOutSine: function (x, t, b, c, d) {
		return c * Math.sin(t/d * (Math.PI/2)) + b;
	},
	easeInOutSine: function (x, t, b, c, d) {
		return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
	},
	easeInExpo: function (x, t, b, c, d) {
		return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
	},
	easeOutExpo: function (x, t, b, c, d) {
		return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
	},
	easeInOutExpo: function (x, t, b, c, d) {
		if (t==0) return b;
		if (t==d) return b+c;
		if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
		return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
	},
	easeInCirc: function (x, t, b, c, d) {
		return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
	},
	easeOutCirc: function (x, t, b, c, d) {
		return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
	},
	easeInOutCirc: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
		return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
	},
	easeInElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
	},
	easeOutElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
	},
	easeInOutElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
		return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
	},
	easeInBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c*(t/=d)*t*((s+1)*t - s) + b;
	},
	easeOutBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
	},
	easeInOutBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158; 
		if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
		return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
	},
	easeInBounce: function (x, t, b, c, d) {
		return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d) + b;
	},
	easeOutBounce: function (x, t, b, c, d) {
		if ((t/=d) < (1/2.75)) {
			return c*(7.5625*t*t) + b;
		} else if (t < (2/2.75)) {
			return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
		} else if (t < (2.5/2.75)) {
			return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
		} else {
			return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
		}
	},
	easeInOutBounce: function (x, t, b, c, d) {
		if (t < d/2) return jQuery.easing.easeInBounce (x, t*2, 0, c, d) * .5 + b;
		return jQuery.easing.easeOutBounce (x, t*2-d, 0, c, d) * .5 + c*.5 + b;
	}
});

jQuery.fn.sortElements = (function(){
 
    var sort = [].sort;
 
    return function(comparator, getSortable) {
 
        getSortable = getSortable || function(){return this;};
 
        var placements = this.map(function(){
 
            var sortElement = getSortable.call(this),
                parentNode = sortElement.parentNode,
 
                // Since the element itself will change position, we have
                // to have some way of storing its original position in
                // the DOM. The easiest way is to have a 'flag' node:
                nextSibling = parentNode.insertBefore(
                    document.createTextNode(''),
                    sortElement.nextSibling
                );
 
            return function() {
 
                if (parentNode === this) {
                    throw new Error(
                        "You can't sort elements if any one is a descendant of another."
                    );
                }
 
                // Insert before flag:
                parentNode.insertBefore(this, nextSibling);
                // Remove flag:
                parentNode.removeChild(nextSibling);
 
            };
 
        });
 
        return sort.call(this, comparator).each(function(i){
            placements[i].call(getSortable.call(this));
        });
 
    };
 
})();

// Domain Public by Eric Wendelin http://eriwen.com/ (2008)
//                  Luke Smith http://lucassmith.name/ (2008)
//                  Loic Dachary <loic@dachary.org> (2008)
//                  Johan Euphrosine <proppy@aminche.com> (2008)
//                  Oyvind Sean Kinsey http://kinsey.no/blog (2010)
//                  Victor Homyakov <victor-homyakov@users.sourceforge.net> (2010)
/*global module, exports, define, ActiveXObject*/
(function(global, factory) {
    if (typeof exports === 'object') {
        // Node
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        // AMD
        define(factory);
    } else {
        // Browser globals
        global.printStackTrace = factory();
    }
}(this, function() {
    /**
     * Main function giving a function stack trace with a forced or passed in Error
     *
     * @cfg {Error} e The error to create a stacktrace from (optional)
     * @cfg {Boolean} guess If we should try to resolve the names of anonymous functions
     * @return {Array} of Strings with functions, lines, files, and arguments where possible
     */
    function printStackTrace(options) {
        options = options || {guess: true};
        var ex = options.e || null, guess = !!options.guess;
        var p = new printStackTrace.implementation(), result = p.run(ex);
        return (guess) ? p.guessAnonymousFunctions(result) : result;
    }

    printStackTrace.implementation = function() {
    };

    printStackTrace.implementation.prototype = {
        /**
         * @param {Error} [ex] The error to create a stacktrace from (optional)
         * @param {String} [mode] Forced mode (optional, mostly for unit tests)
         */
        run: function(ex, mode) {
            ex = ex || this.createException();
            mode = mode || this.mode(ex);
            if (mode === 'other') {
                return this.other(arguments.callee);
            } else {
                return this[mode](ex);
            }
        },

        createException: function() {
            try {
                this.undef();
            } catch (e) {
                return e;
            }
        },

        /**
         * Mode could differ for different exception, e.g.
         * exceptions in Chrome may or may not have arguments or stack.
         *
         * @return {String} mode of operation for the exception
         */
        mode: function(e) {
            if (e['arguments'] && e.stack) {
                return 'chrome';
            }

            if (e.stack && e.sourceURL) {
                return 'safari';
            }

            if (e.stack && e.number) {
                return 'ie';
            }

            if (e.stack && e.fileName) {
                return 'firefox';
            }

            if (e.message && e['opera#sourceloc']) {
                // e.message.indexOf("Backtrace:") > -1 -> opera9
                // 'opera#sourceloc' in e -> opera9, opera10a
                // !e.stacktrace -> opera9
                if (!e.stacktrace) {
                    return 'opera9'; // use e.message
                }
                if (e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
                    // e.message may have more stack entries than e.stacktrace
                    return 'opera9'; // use e.message
                }
                return 'opera10a'; // use e.stacktrace
            }

            if (e.message && e.stack && e.stacktrace) {
                // e.stacktrace && e.stack -> opera10b
                if (e.stacktrace.indexOf("called from line") < 0) {
                    return 'opera10b'; // use e.stacktrace, format differs from 'opera10a'
                }
                // e.stacktrace && e.stack -> opera11
                return 'opera11'; // use e.stacktrace, format differs from 'opera10a', 'opera10b'
            }

            if (e.stack && !e.fileName) {
                // Chrome 27 does not have e.arguments as earlier versions,
                // but still does not have e.fileName as Firefox
                return 'chrome';
            }

            return 'other';
        },

        /**
         * Given a context, function name, and callback function, overwrite it so that it calls
         * printStackTrace() first with a callback and then runs the rest of the body.
         *
         * @param {Object} context of execution (e.g. window)
         * @param {String} functionName to instrument
         * @param {Function} callback function to call with a stack trace on invocation
         */
        instrumentFunction: function(context, functionName, callback) {
            context = context || window;
            var original = context[functionName];
            context[functionName] = function instrumented() {
                callback.call(this, printStackTrace().slice(4));
                return context[functionName]._instrumented.apply(this, arguments);
            };
            context[functionName]._instrumented = original;
        },

        /**
         * Given a context and function name of a function that has been
         * instrumented, revert the function to it's original (non-instrumented)
         * state.
         *
         * @param {Object} context of execution (e.g. window)
         * @param {String} functionName to de-instrument
         */
        deinstrumentFunction: function(context, functionName) {
            if (context[functionName].constructor === Function &&
                context[functionName]._instrumented &&
                context[functionName]._instrumented.constructor === Function) {
                context[functionName] = context[functionName]._instrumented;
            }
        },

        /**
         * Given an Error object, return a formatted Array based on Chrome's stack string.
         *
         * @param e - Error object to inspect
         * @return Array<String> of function calls, files and line numbers
         */
        chrome: function(e) {
            return (e.stack + '\n')
                .replace(/^[\s\S]+?\s+at\s+/, ' at ') // remove message
                .replace(/^\s+(at eval )?at\s+/gm, '') // remove 'at' and indentation
                .replace(/^([^\(]+?)([\n$])/gm, '{anonymous}() ($1)$2')
                .replace(/^Object.<anonymous>\s*\(([^\)]+)\)/gm, '{anonymous}() ($1)')
                .replace(/^(.+) \((.+)\)$/gm, '$1@$2')
                .split('\n')
                .slice(0, -1);
        },

        /**
         * Given an Error object, return a formatted Array based on Safari's stack string.
         *
         * @param e - Error object to inspect
         * @return Array<String> of function calls, files and line numbers
         */
        safari: function(e) {
            return e.stack.replace(/\[native code\]\n/m, '')
                .replace(/^(?=\w+Error\:).*$\n/m, '')
                .replace(/^@/gm, '{anonymous}()@')
                .split('\n');
        },

        /**
         * Given an Error object, return a formatted Array based on IE's stack string.
         *
         * @param e - Error object to inspect
         * @return Array<String> of function calls, files and line numbers
         */
        ie: function(e) {
            return e.stack
                .replace(/^\s*at\s+(.*)$/gm, '$1')
                .replace(/^Anonymous function\s+/gm, '{anonymous}() ')
                .replace(/^(.+)\s+\((.+)\)$/gm, '$1@$2')
                .split('\n')
                .slice(1);
        },

        /**
         * Given an Error object, return a formatted Array based on Firefox's stack string.
         *
         * @param e - Error object to inspect
         * @return Array<String> of function calls, files and line numbers
         */
        firefox: function(e) {
            return e.stack.replace(/(?:\n@:0)?\s+$/m, '')
                .replace(/^(?:\((\S*)\))?@/gm, '{anonymous}($1)@')
                .split('\n');
        },

        opera11: function(e) {
            var ANON = '{anonymous}', lineRE = /^.*line (\d+), column (\d+)(?: in (.+))? in (\S+):$/;
            var lines = e.stacktrace.split('\n'), result = [];

            for (var i = 0, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                    var location = match[4] + ':' + match[1] + ':' + match[2];
                    var fnName = match[3] || "global code";
                    fnName = fnName.replace(/<anonymous function: (\S+)>/, "$1").replace(/<anonymous function>/, ANON);
                    result.push(fnName + '@' + location + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
                }
            }

            return result;
        },

        opera10b: function(e) {
            // "<anonymous function: run>([arguments not available])@file://localhost/G:/js/stacktrace.js:27\n" +
            // "printStackTrace([arguments not available])@file://localhost/G:/js/stacktrace.js:18\n" +
            // "@file://localhost/G:/js/test/functional/testcase1.html:15"
            var lineRE = /^(.*)@(.+):(\d+)$/;
            var lines = e.stacktrace.split('\n'), result = [];

            for (var i = 0, len = lines.length; i < len; i++) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                    var fnName = match[1] ? (match[1] + '()') : "global code";
                    result.push(fnName + '@' + match[2] + ':' + match[3]);
                }
            }

            return result;
        },

        /**
         * Given an Error object, return a formatted Array based on Opera 10's stacktrace string.
         *
         * @param e - Error object to inspect
         * @return Array<String> of function calls, files and line numbers
         */
        opera10a: function(e) {
            // "  Line 27 of linked script file://localhost/G:/js/stacktrace.js\n"
            // "  Line 11 of inline#1 script in file://localhost/G:/js/test/functional/testcase1.html: In function foo\n"
            var ANON = '{anonymous}', lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
            var lines = e.stacktrace.split('\n'), result = [];

            for (var i = 0, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                    var fnName = match[3] || ANON;
                    result.push(fnName + '()@' + match[2] + ':' + match[1] + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
                }
            }

            return result;
        },

        // Opera 7.x-9.2x only!
        opera9: function(e) {
            // "  Line 43 of linked script file://localhost/G:/js/stacktrace.js\n"
            // "  Line 7 of inline#1 script in file://localhost/G:/js/test/functional/testcase1.html\n"
            var ANON = '{anonymous}', lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
            var lines = e.message.split('\n'), result = [];

            for (var i = 2, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                    result.push(ANON + '()@' + match[2] + ':' + match[1] + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
                }
            }

            return result;
        },

        // Safari 5-, IE 9-, and others
        other: function(curr) {
            var ANON = '{anonymous}', fnRE = /function\s*([\w\-$]+)?\s*\(/i, stack = [], fn, args, maxStackSize = 10;
            var slice = Array.prototype.slice;
            while (curr && curr['arguments'] && stack.length < maxStackSize) {
                fn = fnRE.test(curr.toString()) ? RegExp.$1 || ANON : ANON;
                args = slice.call(curr['arguments'] || []);
                stack[stack.length] = fn + '(' + this.stringifyArguments(args) + ')';
                try {
                    curr = curr.caller;
                } catch (e) {
                    stack[stack.length] = '' + e;
                    break;
                }
            }
            return stack;
        },

        /**
         * Given arguments array as a String, substituting type names for non-string types.
         *
         * @param {Arguments,Array} args
         * @return {String} stringified arguments
         */
        stringifyArguments: function(args) {
            var result = [];
            var slice = Array.prototype.slice;
            for (var i = 0; i < args.length; ++i) {
                var arg = args[i];
                if (arg === undefined) {
                    result[i] = 'undefined';
                } else if (arg === null) {
                    result[i] = 'null';
                } else if (arg.constructor) {
                    // TODO constructor comparison does not work for iframes
                    if (arg.constructor === Array) {
                        if (arg.length < 3) {
                            result[i] = '[' + this.stringifyArguments(arg) + ']';
                        } else {
                            result[i] = '[' + this.stringifyArguments(slice.call(arg, 0, 1)) + '...' + this.stringifyArguments(slice.call(arg, -1)) + ']';
                        }
                    } else if (arg.constructor === Object) {
                        result[i] = '#object';
                    } else if (arg.constructor === Function) {
                        result[i] = '#function';
                    } else if (arg.constructor === String) {
                        result[i] = '"' + arg + '"';
                    } else if (arg.constructor === Number) {
                        result[i] = arg;
                    } else {
                        result[i] = '?';
                    }
                }
            }
            return result.join(',');
        },

        sourceCache: {},

        /**
         * @return the text from a given URL
         */
        ajax: function(url) {
            var req = this.createXMLHTTPObject();
            if (req) {
                try {
                    req.open('GET', url, false);
                    //req.overrideMimeType('text/plain');
                    //req.overrideMimeType('text/javascript');
                    req.send(null);
                    //return req.status == 200 ? req.responseText : '';
                    return req.responseText;
                } catch (e) {
                }
            }
            return '';
        },

        /**
         * Try XHR methods in order and store XHR factory.
         *
         * @return <Function> XHR function or equivalent
         */
        createXMLHTTPObject: function() {
            var xmlhttp, XMLHttpFactories = [
                function() {
                    return new XMLHttpRequest();
                }, function() {
                    return new ActiveXObject('Msxml2.XMLHTTP');
                }, function() {
                    return new ActiveXObject('Msxml3.XMLHTTP');
                }, function() {
                    return new ActiveXObject('Microsoft.XMLHTTP');
                }
            ];
            for (var i = 0; i < XMLHttpFactories.length; i++) {
                try {
                    xmlhttp = XMLHttpFactories[i]();
                    // Use memoization to cache the factory
                    this.createXMLHTTPObject = XMLHttpFactories[i];
                    return xmlhttp;
                } catch (e) {
                }
            }
        },

        /**
         * Given a URL, check if it is in the same domain (so we can get the source
         * via Ajax).
         *
         * @param url <String> source url
         * @return <Boolean> False if we need a cross-domain request
         */
        isSameDomain: function(url) {
            return typeof location !== "undefined" && url.indexOf(location.hostname) !== -1; // location may not be defined, e.g. when running from nodejs.
        },

        /**
         * Get source code from given URL if in the same domain.
         *
         * @param url <String> JS source URL
         * @return <Array> Array of source code lines
         */
        getSource: function(url) {
            // TODO reuse source from script tags?
            if (!(url in this.sourceCache)) {
                this.sourceCache[url] = this.ajax(url).split('\n');
            }
            return this.sourceCache[url];
        },

        guessAnonymousFunctions: function(stack) {
            for (var i = 0; i < stack.length; ++i) {
                var reStack = /\{anonymous\}\(.*\)@(.*)/,
                    reRef = /^(.*?)(?::(\d+))(?::(\d+))?(?: -- .+)?$/,
                    frame = stack[i], ref = reStack.exec(frame);

                if (ref) {
                    var m = reRef.exec(ref[1]);
                    if (m) { // If falsey, we did not get any file/line information
                        var file = m[1], lineno = m[2], charno = m[3] || 0;
                        if (file && this.isSameDomain(file) && lineno) {
                            var functionName = this.guessAnonymousFunction(file, lineno, charno);
                            stack[i] = frame.replace('{anonymous}', functionName);
                        }
                    }
                }
            }
            return stack;
        },

        guessAnonymousFunction: function(url, lineNo, charNo) {
            var ret;
            try {
                ret = this.findFunctionName(this.getSource(url), lineNo);
            } catch (e) {
                ret = 'getSource failed with url: ' + url + ', exception: ' + e.toString();
            }
            return ret;
        },

        findFunctionName: function(source, lineNo) {
            // FIXME findFunctionName fails for compressed source
            // (more than one function on the same line)
            // function {name}({args}) m[1]=name m[2]=args
            var reFunctionDeclaration = /function\s+([^(]*?)\s*\(([^)]*)\)/;
            // {name} = function ({args}) TODO args capture
            // /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*function(?:[^(]*)/
            var reFunctionExpression = /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*function\b/;
            // {name} = eval()
            var reFunctionEvaluation = /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*(?:eval|new Function)\b/;
            // Walk backwards in the source lines until we find
            // the line which matches one of the patterns above
            var code = "", line, maxLines = Math.min(lineNo, 20), m, commentPos;
            for (var i = 0; i < maxLines; ++i) {
                // lineNo is 1-based, source[] is 0-based
                line = source[lineNo - i - 1];
                commentPos = line.indexOf('//');
                if (commentPos >= 0) {
                    line = line.substr(0, commentPos);
                }
                // TODO check other types of comments? Commented code may lead to false positive
                if (line) {
                    code = line + code;
                    m = reFunctionExpression.exec(code);
                    if (m && m[1]) {
                        return m[1];
                    }
                    m = reFunctionDeclaration.exec(code);
                    if (m && m[1]) {
                        //return m[1] + "(" + (m[2] || "") + ")";
                        return m[1];
                    }
                    m = reFunctionEvaluation.exec(code);
                    if (m && m[1]) {
                        return m[1];
                    }
                }
            }
            return '(?)';
        }
    };

    return printStackTrace;
}));
/*!
 * jQuery Cookie Plugin v1.4.0
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));

/**** EXTRACTED SWITCHCLASS FROM jQueryUI ****/
$.effects = {};
var classAnimationActions = ['add', 'remove', 'toggle'],
	shorthandStyles = {
		border: 1,
		borderBottom: 1,
		borderColor: 1,
		borderLeft: 1,
		borderRight: 1,
		borderTop: 1,
		borderWidth: 1,
		margin: 1,
		padding: 1
	};
$.effects.animateClass = function(value, duration, easing, callback) {
	if ($.isFunction(easing)) {
		callback = easing;
		easing = null;
	}
	
	return this.queue(function() {
		var that = $(this),
		originalStyleAttr = that.attr('style') || ' ',
		originalStyle = filterStyles(getElementStyles.call(this)),
		newStyle,
		className = that.attr('class') || "";
	
		$.each(classAnimationActions, function(i, action) {
			if (value[action]) {
				that[action + 'Class'](value[action]);
			}
		});
		newStyle = filterStyles(getElementStyles.call(this));
		that.attr('class', className);
	
		that.animate(styleDifference(originalStyle, newStyle), {
			queue: false,
			duration: duration,
			easing: easing,
			complete: function() {
				$.each(classAnimationActions, function(i, action) {
					if (value[action]) { that[action + 'Class'](value[action]); }
				});
				// work around bug in IE by clearing the cssText before setting it
				if (typeof that.attr('style') == 'object') {
					that.attr('style').cssText = '';
					that.attr('style').cssText = originalStyleAttr;
				} else {
					that.attr('style', originalStyleAttr);
				}
				if (callback) {
					callback.apply(this, arguments);
				}
				$.dequeue( this );
			}
		});
	});
};
$.fn.extend({
	switchClass: function(remove,add,speed,easing,callback) {
		return $.effects.animateClass.apply(this, [{ add: add, remove: remove },speed,easing,callback]);
	}
});
function getElementStyles() {
	var style = document.defaultView
			? document.defaultView.getComputedStyle(this, null)
			: this.currentStyle,
		newStyle = {},
		key,
		camelCase;

	// webkit enumerates style porperties
	if (style && style.length && style[0] && style[style[0]]) {
		var len = style.length;
		while (len--) {
			key = style[len];
			if (typeof style[key] == 'string') {
				camelCase = key.replace(/\-(\w)/g, function(all, letter){
					return letter.toUpperCase();
				});
				newStyle[camelCase] = style[key];
			}
		}
	} else {
		for (key in style) {
			if (typeof style[key] === 'string') {
				newStyle[key] = style[key];
			}
		}
	}
	
	return newStyle;
}
function styleDifference(oldStyle, newStyle) {
	var diff = { _: 0 }, // http://dev.jquery.com/ticket/5459
		name;

	for (name in newStyle) {
		if (oldStyle[name] != newStyle[name]) {
			diff[name] = newStyle[name];
		}
	}

	return diff;
}
function filterStyles(styles) {
	var name, value;
	for (name in styles) {
		value = styles[name];
		if (
			// ignore null and undefined values
			value == null ||
			// ignore functions (when does this occur?)
			$.isFunction(value) ||
			// shorthand styles that need to be expanded
			name in shorthandStyles ||
			// ignore scrollbars (break in IE)
			(/scrollbar/).test(name) ||

			// only colors or values that can be converted to numbers
			(!(/color/i).test(name) && isNaN(parseFloat(value)))
		) {
			delete styles[name];
		}
	}
	
	return styles;
}

/* **********************************************
     Begin hhic-dev.js
********************************************** */

var hhic = {
	utils: {
		//tests: {}
	},
	page_controls: {},
	layout_controls: {},
	element_controls: {},
	current_init: {},
	tmp: {},
	carouselInterval: 3000
},
	nav_breakpoint = 900,
	viewportwidth,
	viewportheight;
var mobile = ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) ? true : null;
hhic.ipad = ( /iPad/i.test(navigator.userAgent) ) ? true : null;
var ms_win = (/Windows/i.test(navigator.userAgent)) ? true : null;

/* DISPLAY BREAKPOINTS



*/

hhic.utils.getViewport = function() {
	if (typeof window.innerWidth !== 'undefined')  {
		viewportwidth = window.innerWidth;
		viewportheight = window.innerHeight;
	} else if (typeof document.documentElement !== 'undefined' && typeof document.documentElement.clientWidth !== 'undefined' && document.documentElement.clientWidth !== 0){
		viewportwidth = document.documentElement.clientWidth;
		viewportheight = document.documentElement.clientHeight;
	} else {
		viewportwidth = document.getElementsByTagName('body')[0].clientWidth;
		viewportheight = document.getElementsByTagName('body')[0].clientHeight;
	}
};
hhic.utils.formatNavigation = function(){
	var supp = $('.nav.supplemental'),
		core = $('.main-nav'),
		filter = 'divider-vertical',
		tmps = $('.nav').find('.tmp'),
		hLeft = $('.header-left'),
		hRight = $('.header-right'),
		social = $('.social-block'),
		header = $('#header');
	
	if(viewportwidth <= nav_breakpoint){
		supp.fadeTo(300,0).hide();
		var lis = supp.find('li');
		if(tmps.length === 0){
			$.each(lis, function(){
				var invalid = $(this).hasClass(filter);
				if(!invalid){
					$(this).clone().addClass('tmp').appendTo(core.find('.nav'));
				}
			});
		}
	} else {
		$.each(tmps, function(){
			$(this).remove();
		});
		supp.show().fadeTo(300,1);
	}
	
	if(viewportwidth <= 767){
		if($('.social-block.tmp.mobile').length < 1){
			social.clone().addClass('tmp mobile').prependTo(header);
			social.hide();
		}
	} else {
		if($('.social-block.tmp.mobile').length > 0){
			$('.social-block.tmp.mobile').remove();
			social.show();
		}
	}
};

hhic.utils.teasers = function(){
	var block = $('#teasers-block');
	if(block.length !== -1){
		var teasers = block.find('.teaser');
		$.each(teasers, function(){
			if(!$(this).hasClass('formed')){
				var link = $(this).attr('data-link');
				if(link !== ''){
					$(this).css({'cursor':'pointer'}).on('click', function(e){
						e.preventDefault();
						window.location = link;
					});
				}
			} else {
				var form = $(this).find('form');
				$(this).css({'cursor':'pointer'}).on('click', function(e){
					e.preventDefault();
					form.submit();
				});
			}
		});
	}
};
/////////HERE!!!!!!!!!!!!!!!!!!!!! TRYING TO CREATE A SCRIPT TO REGULATE LEFT RAIL ON PHONE
hhic.utils.leftRailManager = function(){
	var left_rail = $('.left-rail'),
		container = $('.content1200'),
		nav = $('.rail_nav'),
		content = $('.left_rail_content'),
		main = $('body').find('.content');
	if(viewportwidth <= 767){
		container.css('margin-top', 0);
		left_rail.hide();
	} else {
		container.css('margin-top', '2em');
		left_rail.show();
	}
};

hhic.utils.housekeeping = function(){
	hhic.utils.formatNavigation();
	hhic.utils.leftRailManager();
	hhic.utils.matchHeights();
	hhic.utils.teasers();
	if($('.carousel').find('.video').length > 0){
		hhic.element_controls.videoSizer();
	}
	if($.isFunction(hhic.current_init)){
		hhic.current_init();
	}
};

hhic.page_controls = {
	index: {
		init: function(){
			var items = $('.carousel').find('.item');
			$(items[0]).addClass('active');
			if(items.length < 2){
				$('.carousel-control').hide();
			}
			$('.carousel').carousel({
				interval: hhic.carouselInterval
			});
		},
	},
	'event-manager': {
		init: function(){
			var boxed = $('.content1200');
			$.each(boxed, function(){
				$(this).removeClass('content1200').addClass('registration-content');
			});
			var parents = '.user-options';
			hhic.utils.matchHeights(parents,'h4');
			hhic.utils.matchHeights(parents,'p');
			//console.log($.cookie('mgr_rail'));
			if($.cookie('mgr_rail') === 'undefined'){
				$.cookie('mgr_rail', 'open');
			}
			
			// 1 means it's open, 0 means its closed, on click means it is transiitoning from 1>0 or 0<1
			
			
			state_params = {
				'open': {
					text: 'close',
					val: 1,
					style: 'open',
					elem_array: [
						['.crushed.left-rail','crushed','span3'],
						['.span12.content','span12','span9']
					],
					icon: 'icon-chevron-left',
					marginLeft: ['.span9.content','2%']
				},
				'closed': {
					text: 'open',
					val: 0,
					style: 'closed',
					elem_array: [
						['.span3.left-rail','span3','crushed'],
						['.span9.content','span9','span12']
					],
					icon: 'icon-chevron-right',
					marginLeft: ['.span12.content',0]
				}
			};			
			
			var controller = $('<a />').attr({'class':'display-controller'}).prepend($('<i />').attr({'class':'icon-chevron-left'})).append($('<span />').attr({'class':'button-title'}).text('new'));
			var page = $('.registration-content');
			var left_rail = $('.left-rail');
			content = left_rail.next('.content');
			edit_btns = left_rail.find('.edit_btn');
			edit_btns.remove();
			if($('#report').length > 0){
				if($('.display-controller').length < 1){
					page.prepend(controller.on('click', function(e){
						//console.log('v005');
						var x = $.cookie('mgr_rail') === 'open' ? 'closed' : 'open';
						manageRailState(x);
						
					}));
				}
			}
			
			manageRailState();
			function runAnimation(elems, callback){
				$.each(elems, function(index){
					$(this[0]).switchClass(this[1],this[2],20);
				});
				callback;
			}
			function manageRailState(new_state){
				var ns = new_state || 'open';
				var time = 20;
				if(ns){
					$.cookie('mgr_rail', ns);
				}
				var toState = $.cookie('mgr_rail');
				var _this_target = state_params[toState];
				
				runAnimation(_this_target.elem_array, function(){
					$(_this_target.marginLeft[0]).css('margin-left',_this_target.marginLeft[1]);
				});
				$('.display-controller').find('.button-title').text(_this_target.text);
				$('.display-controller').find('i').attr('class',_this_target.icon);
			}
		}
	},
	'overview': { //this is events overview -- need to coordinate page ids
		init: function(){
			var parents = '.match-elements';
			var tags = ['.event-title','.event-date','.event-location','.event-tickets'];
			for(var i = 0; i < tags.length; i++){
				hhic.utils.matchHeights(parents,tags[i]);
			}
			hhic.utils.matchHeights();
		}
	},
	'tickets': {
		init: function(){
			//hhic.utils.iframeStyler();
		}
	},
	'information': { //this is events overview -- need to coordinate page ids
		inited: false,
		init: function(){
			var _this = hhic.page_controls.information;
			var teasers = $('.teaser');
			_this.balancer();
			if(_this.inited === false){
				$.each(teasers, function(i){
					var a = $(this).find('a');
					var link = a.attr('href');
					a.hide();
					$(this).on('click', function(e){
						e.preventDefault();
						window.location = link;
					});
				});
				_this.inited = true;
			}
			var img_wraps = $('.teaser .img_wrap');
			$.each(img_wraps, function(){
				var w = $(this).width();
				$(this).height(Math.ceil(w/1.6));
			});
		},
		balancer: function(){
			var parents = '.match-elements';
			var tags = ['h3','p','.teaser'];
			for(var i = 0; i < tags.length; i++){
				hhic.utils.matchHeights(parents,tags[i]);
			}
			hhic.utils.matchHeights();
		}
	}
	
};

window.onresize = function() {
	clearTimeout(hhic.globalTimer);
	hhic.globalTimer = setTimeout(hhic.utils.doneResize, 10);
	hhic.utils.getViewport();
	
};
hhic.utils.doneResize = function(){
	hhic.utils.housekeeping();
	//sugar.page_support.match_heights();
};

hhic.utils.sortList = function(child_el,parent_el){
	var children = $(child_el);
	var parent = children.closest(parent_el);
	children.sort(function(a, b) {
	   return $(a).text().toUpperCase().localeCompare($(b).text().toUpperCase());
	})
	$.each(children, function(k, v) {
		parent.append(v);
	});
};


hhic.utils.shrinkyHeader = function(){
	$('#header').css({
		'position':'fixed',
		'z-index':999,
		'top':0,
		'left':0,
		'width':'100%'
	});
	$('#header').data('size','big');
	$(window).scroll(function(){
		if($(document).scrollTop() > 0){
			if($('#header').data('size') == 'big'){
				$('#header').data('size','small');
				$('#header').stop().animate({
					height:'40px'
				},600);
			}
		} else {
			if($('#header').data('size') == 'small'){
				$('#header').data('size','big');
				$('#header').stop().animate({
					height:'auto'
				},600);
			}  
		}
	});
};

hhic.utils.matchHeights = function(container,tag,exception){
	var max_height = 0;
	var parent = container === undefined ? '.match-heights' : container;
	var tag = tag === undefined ? '.height-match' : tag;
	var container = $(parent),
		all_targets = container.find(tag);
	//$.each(all_targets, function(){
		//$(this).removeAttr('style');
	//});
	if(viewportwidth >= 767){
		if($(parent).length !== -1){
			$.each(container, function(){
				var targets = $(this).find(tag),
					max_height = 0;
				$.each(targets, function(){
					//$(this).removeAttr('style');
					max_height = $(this).height() > max_height ? $(this).height() : max_height;
				});
				if(!exception){
					for(var i = 0; i < targets.length; i++){
						var _this = targets[i];
						$(_this).height(max_height);
					}
				} else {
					$(this).height(max_height);
				}
			});
		}
	}
	
};


var $modalContent = $('#modalContent');
$modalContent.hide();

function createModalElements(){
	$('body').append('<div id="blockingLayer"></div>');
	$('body').append('<div id="modalFrame"></div>');
	
	var $blocker = $('#blockingLayer');
	var $modalFrame = $('#modalFrame');
	
	$('#blockingLayer').css({
		'width': $viewportWidth,
		'height':$viewportHeight,
		'opacity': 0.8
	}).bind('click',function(){
		modalDestroyer();
	}).hide();
	$('#modalFrame').bind('click',function(){
		modalDestroyer();
	}).hide();		
	$modalFrame.append($modalContent);
	$modalElements = $('#blockingLayer, #modalFrame');
}

function modalDestroyer() {
	$modalContent.unwrap($('#modalFrame')).hide();
	$modalElements.fadeOut('fast').remove();
}

$('#concoursAlert').click(function(e){
	e.preventDefault();
	createModalElements();
	$('#modalFrame').append($modalContent);
	$('#blockingLayer').fadeIn('slow');
	$modalContent.show();
	$('#modalFrame').css({
		'margin-top': ($viewportHeight - $('#modalFrame').height()) /2,
		'margin-left': ($viewportWidth - $('#modalFrame').width()) /2
	}).fadeIn('fast');	

});
hhic.element_controls.initModal = function(){
	var modalContent = $('#modalContent');
	modalContent.hide();
	
	function createModalElements(){
		$('body').append('<div id="blockingLayer"></div>');
		$('body').append('<div id="modalFrame"></div>');
		
		var $blocker = $('#blockingLayer');
		var $modalFrame = $('#modalFrame');
		
		$('#blockingLayer').css({
			'width': $viewportWidth,
			'height':$viewportHeight,
			'opacity': 0.8
		}).bind('click',function(){
			modalDestroyer();
		}).hide();
		$('#modalFrame').bind('click',function(){
			modalDestroyer();
		}).hide();		
		$modalFrame.append($modalContent);
		$modalElements = $('#blockingLayer, #modalFrame');
	}
	
	$('#concoursAlert').click(function(e){
		e.preventDefault();
		createModalElements();
		$('#modalFrame').append($modalContent);
		$('#blockingLayer').fadeIn('slow');
		$modalContent.show();
		$('#modalFrame').css({
			'margin-top': ($viewportHeight - $('#modalFrame').height()) /2,
			'margin-left': ($viewportWidth - $('#modalFrame').width()) /2
		}).fadeIn('fast');	
	
	});
};

hhic.utils.tests = function(){
	if($('.multiverse-container').length >= 1){
		return hhic.element_controls.multiverse();
	}
	if($('.listing-block').length >= 1){
		return hhic.element_controls.listings();
	}
	if($('#modalContent').length >=1){
		return hhic.element_controls.initModal();
	}
	hhic.element_controls.touchScroll();
};
hhic.element_controls.touchScroll = function(){
	if(mobile){
		var triggers = $('a[rel=shadowbox]');
		if(triggers.length > 0){
			$.each(triggers, function(){
				$(this).on('click', function(){
					setTimeout(function(){
						
						var wrapper = $('#sb-player');
						$('#sb-body-inner').height($('#sb-wrapper-inner').css('height'));
						if(wrapper.length > 0){
							$(wrapper).ready(function(){
								var s = document.getElementById('sb-player');
								var d = s.contentDocument || s.contentWindow.document;
								$(d).find('body').attr('id','modal-content').on('touchstart', function(ev){
									$('body').css({
										/* 'background':'white', */
										'height':'100%',
										'overflow':'hidden',
										'position':'fixed',
									});							
								
								}).on('touchend', function(ev){
									$('body').attr('style','');
									
								});
							});
						}
					},2000);
				});
			});
		}
	}
};
hhic.element_controls.videoSizer = function(){
	var wrapper = $('.carousel').find('.video');
	var items = $('.carousel').find('.item');
	var active_index;
	
	$.each(items, function(index){
		active_index = $(this).hasClass('active') ? index : active_index;
	});
	
	$.each(wrapper, function(){
		var t_width = viewportwidth > 1280 ? 1280 : viewportwidth;
		var ratio = .416;
		$(this).width(t_width).height(Math.floor(t_width * ratio));
	});
	
	$.each(items, function(){
		if($(this).hasClass('active')){
			$(this).removeClass('active');
		}
	});
	$('.carousel').carousel('cycle');
	$('.carousel').carousel({
		interval: hhic.carouselInterval
	});
	return;
};
hhic.element_controls.listings = function(){
	var containers = $('.listing-block');
	//hhic.utils.matchHeights(containers,'.span4.listing-item');
	//hhic.utils.matchHeights(containers,'.span3.listing-item');
	$.each(containers, function(){
		var children = $(this).find('.listing-item'),
			counter;
		$.each(children, function(index){
			var classes = $(this).attr('class');
			var class_array = classes.split(' ');
			for(i = 0; i < class_array.length; i++){
				if(class_array[i].substring(0,4) === 'span'){
					counter = parseInt(class_array[i].replace('span',''));					
				}
			}
			if(counter !== 12){
				var n = (12 / counter);
				if((index % n) === 0){
					var breaker = $('<div />').attr('class','clearfix');
					$(this).css('margin-left',0).before(breaker);
				}
				//if((index + 1) % n
			}
		});
	});
};
hhic.element_controls.multiverse = function(){
	var containers = $('.multiverse-container'),
		hash = !window.location.hash ? null : window.location.hash.replace('#','');
	$.each(containers, function(){
		var _this = $(this);
		var _id = _this.attr('id'),
			sections = _this.find('.multiverse-section'),
			_controller = _this.find('.multiverse-controller');
		var _controls = hhic.tmp._controls = _controller.find('.control');
		var _blocks = [];
		var _index = 99999;
		if(_controls.length === 1){
			_controller.remove();
			return false;
		}
		_this.prop('mv_content', []);
		
		var controls_height = 0;
		$.each(_controls, function(i){
			var target = $(this).data('target'),
				children = _this.find('.item[data-item='+target+']'),
				_others = _this.find('.item[data-item!='+target+']');
			control = $(this);
			$(this).prop('nav-order', i);
			var content = {};
			
			controls_height += $(this).outerHeight();
			
			$.each(children, function(index){
				var c = $(this).attr('class').split(' ');
				var name = c[1];
				_blocks.push(name);
				content[name] = $(this).html();
				$(this).remove();
			});
			if((hash && target === hash) || (!hash && i === 0)){
				_this.prop('first_active', i);
			}
			_this[0].mv_content.push(content);
			
			control.on('click', function(e,p){
				e.preventDefault();
				var index = $(this).prop('nav-order');
				if(index !== _index){
					if($(_controls[_index]).hasClass('active')){
						$(_controls[_index]).removeClass('active');
					}
					$(_controls[index]).addClass('active');
					for(i=0; i< _blocks.length; i++){
						var name = _blocks[i];
						var output_target = $('.item.'+name+'[data-id=master]');
						var output = _this[0].mv_content[index][name];
						animate_crap(output_target, output);
					}
					_index = index;
				} 
				
			});
		});
		$('.multiverse-section .item.image').css({
			'min-height' : controls_height
		});
		_blocks = $.unique(_blocks);
		function animate_crap(block,content){
			var timer = 100;
			block.fadeOut(timer, function(){
				$(this).html(content);
				$(this).fadeIn(timer);
			});
		}
		$(_controls[_this.prop('first_active')]).trigger('click');
	});
};
hhic.utils.endTimer = function(t){
	clearInterval(t);
};

hhic.utils.getViewport();

$(function(){
	if(mobile){
		$('body').attr('data-mobile','true');
	}
	hhic.utils.tests();
	if(hhic.page_controls[$('body').attr('id')] !== undefined){
		if($.isFunction(hhic.page_controls[$('body').attr('id')].init)){
			var page_init = hhic.page_controls[$('body').attr('id')].init;
			hhic.current_init = page_init;
			page_init();
		}
	}
	hhic.utils.housekeeping();
});